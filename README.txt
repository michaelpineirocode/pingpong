Our project is Pong. It has all of the features that one might expect: interesting collision logic that robustly checks all edge cases, enemy AI, scoring and score displays, and sound effects. However, we also added many features on top of this, including alternate gamemodes (some with entirely different gameplay and scoring systems, namely Block Breaker), a menu to configure settings, a pause menu with the same options so that everything can be changed on the fly, a game over screen, customizable themes for the website and game, and a score explosion. Some difficulties/cool features/lessons learned our group members encountered are listed below:

- One of the aspects of this project that we found difficult was the audio feature of html. Because audio was a feature that I had not done before, it was a learning curve to get comfortable with a whole new feature. 

- Another new feature we had used was the javascript command getComputedStyle. To get the colors of the game to change based on the style, I had to use this feature to read the style and alter the color based on that. This took me some time to do, as learning a new command always comes with it's challenges. 

- When including multiple game modes, we have to consider how to add onto the base game to alter it enough to be a different mode, but similar enough to feel like it is the same game. 

- As we allowed switching modes mid game, we needed to get our code to be able to reset and change game modes without causing issue. One particularly hard to diagnose bug that was introduced by this feature was the game speeding up when the mode was switched. It was a result of not canceling the previous mode's infinite animate() loop, meaning that the game was essentially trying to render n frames per frame, where n was the number of successive mode switches. Other bugs were introduced by variables not being cleared properly. We noticed that sometimes upon selecting block breaker successively, the ball would collide with a block and the score would increment but the block still be drawn despite all of the correct logic being called. It was a result of the BLOCKS array not being cleared beween runs.

- There were many components of our html that we wanted to hide or show depending on the state of the game. For example, the continue button should only be available from the pause screen. To accomplish this we used javascript as a well as html data attributes. It was cool to entertwine the html data attributes with css to invoke a simple state change without having to access elements directly from javascript.

Each person in our group has spent several hours working on this project and we've reached a point where we feel proud of the result and confident that it deserves full credit.